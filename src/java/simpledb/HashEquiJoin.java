package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private DbIterator child1,child2;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p=p;
        this.child1=child1;
        this.child2=child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
	return child1.getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        child1.open();
        child2.open();
        build();
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
        map.clear();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    }

    transient Iterator<Tuple> listIt = null;
    transient Tuple t2 = null;
    private Map<Field, List<Tuple>> map = new HashMap<>();

    private void build() throws TransactionAbortedException, DbException {
        map.clear();
        while (child1.hasNext()) {
            Tuple tuple = child1.next();
            List<Tuple> bucket = map.get(tuple.getField(p.getField1()));
            if (bucket == null) {
                bucket = new ArrayList<>();
                bucket.add(tuple);
                map.put(tuple.getField(p.getField1()), bucket);
            } else {
                bucket.add(tuple);
            }
        }
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (listIt != null && listIt.hasNext()){
            Tuple t1 = listIt.next();

            // create new tuple
            Tuple tuple = new Tuple(getTupleDesc());
            int len1 = t1.getTupleDesc().numFields();
            int len2 = t2.getTupleDesc().numFields();
            // set tuple 1
            for (int i = 0; i < len1; i++) {
                tuple.setField(i, t1.getField(i));
            }
            // set tuple 2
            for (int i = 0; i < len2; i++) {
                tuple.setField(i + len1, t2.getField(i));
            }
            return tuple;
        }

        while (child2.hasNext()) {
            t2 = child2.next();
            List<Tuple> bucket = map.get(t2.getField(p.getField2()));
            if (bucket == null)
                continue;
            listIt = bucket.iterator();
            return fetchNext();
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[]{child1,child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.child1=children[0];
        this.child2=children[1];
    }
    
}
